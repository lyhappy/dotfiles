#+STARTIOP: overview 
* Tab indent
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil) ; tab 改为插入空格

(setq c-basic-offset 4) ; c c++ 缩进4个空格

(setq c-default-style "linux"); 没有这个 { } 就会瞎搞

(setq default-tab-width 4)
#+END_SRC

#+RESULTS:
: 4

* interface tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC

* try
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

* which key 
  Brings up some help
  #+BEGIN_SRC emacs-lispa
  (use-package which-key
    :ensure t
    :config (which-key-mode))
  #+END_SRC

* org bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC


#+BEGIN_SRC emacs-lisp
(setq indo-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

(defalias 'list-buffers 'ibuffer)
;; (defalias 'list-buffers 'ibuffer-other-window)
#+END_SRC

* ace windows for easy window switching
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foregroud :height 3.0)))))
    ))
#+END_SRC

* Swiper / Ivy / Counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  )

(use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-stule 'fancy))

(use-package swiper
  :ensure try
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC

* avy - navigate by searching for a letter on the screen and jumping to it
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))

#+END_SRC

* auto-complete
#+BEGIN_SRC emacs-lisp
  ;; (use-package auto-complete
  ;;   :ensure t
  ;;   :init
  ;;   (progn
  ;;     (ac-config-default)
  ;;     (global-auto-complete-mode t)
  ;;     ))
#+END_SRC

* custom themes
#+BEGIN_SRC emacs-lisp
(load-theme 'leuven t)

;; (use-package color-theme
;;  :ensure t)

;; (use-package zenburn-theme
;;  :ensure t
;;  :config (load-theme 'solarized-dark t))

;; (load-theme 'leuven t)
#+END_SRC
* Reveal.js
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
:ensure ox-reveal)
(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)
(use-package htmlize
:ensure t)
#+END_SRC

#+RESULTS:

* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))
  #+END_SRC
* Python
#+BEGIN_SRC emacs-lisp
  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))

  (use-package elpy
    :ensure t
    :config
    (elpy-enable))
#+END_SRC
* Yasnippet  
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))

#+END_SRC
* Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode))
#+END_SRC

#+RESULTS:
: t

* Misc packages
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)

  (use-package beacon
    :ensure t
    :config
    (beacon-mode t))

  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))

  (use-package aggressive-indent
    :ensure t
    :config
    (global-aggressive-indent-mode))

  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))

  (use-package linum
    :init
    (progn
      (global-display-line-numbers-mode nil)
      (setq display-line-numbers "%4d \u2502")
      ))

  (use-package autopair
    :config
    (auotpair-global-mode))
#+END_SRC

#+RESULTS:
: t

* Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

;; (use-package treemacs-evil
;;   :after treemacs evil
;;   :ensure t)

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)

(use-package treemacs-persp
  :after treemacs persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))
#+END_SRC
* Lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t)

  (use-package lsp-ui
    :ensure t)

  (use-package company-lsp
    :ensure t)

  (use-package projectile
    :ensure t)

  (use-package hydra
    :ensure t)

  (use-package lsp-treemacs
    :after treemacs lsp-mode
    :config
    (lsp-metals-treeview-enable t)
    (setq lsp-metals-treeview-show-when-views-received t))

#+END_SRC
* JAVA
#+BEGIN_SRC emacs-lisp
  (use-package lsp-java
    :ensure t
    :after lsp
    :init
    (setq lsp-java-vmargs
	  (list
	   "-noverify"
	   "-Xmx1G"
	   "-XX:+UseG1GC"
	   "-XX:+UseStringDeduplication"
	   "-javaagent:~/.m2/repository/org/projectlombok/lombok/1.18.10/lombok-1.18.10.jar"
	   ))
    :config (add-hook 'java-mode-hook #'lsp))
	
#+END_SRC
